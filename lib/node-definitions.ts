export const nodeDefinitions = [
    {
        type: "action",
        category: "processing",
        name: "API Call",
        description: "Executes an API request",
        icon: "Globe",
        inputs: [
            {
                key: "url",
                label: "URL",
                type: "string",
                placeholder: "https://api.example.com",
                value: "https://api.example.com",
            },
            {
                key: "headers",
                label: "Headers",
                type: "object",
                placeholder: "Authorization: Bearer token",
                value: { Authorization: "Bearer token" },
            },
            {
                key: "body",
                label: "Body",
                type: "object",
                placeholder: "{ message: 'Hello, AI!' }",
                value: { message: "Hello, AI!" },
            },
            { key: "method", label: "Method", type: "select", options: ["GET", "POST", "PUT", "DELETE"], value: "GET" },
        ],
        outputs: [
            { key: "response", label: "Response", type: "object" },
            { key: "status", label: "Status Code", type: "number" },
        ],
        meta: { apiKey: true, env: false },
    },
    {
        type: "input",
        category: "input",
        name: "Text Input",
        description: "Accepts text input from the user",
        icon: "Type",
        inputs: [
            {
                key: "placeholder",
                label: "Placeholder",
                type: "string",
                placeholder: "Enter text...",
                value: "Enter text...",
            },
            { key: "label", label: "Label", type: "string", placeholder: "Input Label", value: "Input Label" },
            { key: "required", label: "Required", type: "boolean", value: false },
        ],
        outputs: [{ key: "value", label: "Value", type: "string" }],
        meta: { validation: false },
    },
    {
        type: "output",
        category: "output",
        name: "Text Output",
        description: "Displays text output to the user",
        icon: "TextCursorInput",
        inputs: [
            { key: "text", label: "Text", type: "string", placeholder: "Output text", value: "Output text" },
            { key: "format", label: "Format", type: "select", options: ["Plain", "Markdown", "HTML"], value: "Plain" },
        ],
        outputs: [],
        meta: { styling: true },
    },
    {
        type: "condition",
        category: "condition",
        name: "If Condition",
        description: "Evaluates a condition and routes accordingly",
        icon: "GitBranchPlus",
        inputs: [
            { key: "condition", label: "Condition", type: "string", placeholder: "value > 10", value: "value > 10" },
            { key: "value", label: "Value", type: "string", placeholder: "Input value", value: "" },
        ],
        outputs: [
            { key: "true", label: "True", type: "boolean" },
            { key: "false", label: "False", type: "boolean" },
        ],
        meta: { advanced: false },
    },
    {
        type: "processing",
        category: "processing",
        name: "Text Processor",
        description: "Processes text using AI models (Gemini, GPT, etc.)",
        icon: "Bot",
        inputs: [
            { key: "text", label: "Input Text", type: "string", placeholder: "Text to process", value: "" },
            {
                key: "model",
                label: "AI Model",
                type: "select",
                options: ["gemini-2.0-flash", "GPT-4", "Claude"],
                value: "gemini-2.0-flash",
            },
            {
                key: "prompt",
                label: "System Prompt",
                type: "string",
                placeholder: "You are a helpful assistant",
                value: "You are a helpful assistant",
            },
        ],
        outputs: [
            { key: "result", label: "Processed Text", type: "string" },
            { key: "tokenUsage", label: "Token Usage", type: "object" },
        ],
        meta: { apiKey: true, streaming: true },
    },
    {
        type: "input",
        category: "input",
        name: "File Upload",
        description: "Accepts file uploads from the user",
        icon: "FileUp",
        inputs: [
            {
                key: "accept",
                label: "Accepted Types",
                type: "string",
                placeholder: ".pdf,.docx,image/*",
                value: ".pdf,.docx,image/*",
            },
            { key: "maxSize", label: "Max Size (MB)", type: "number", placeholder: "5", value: 5 },
        ],
        outputs: [
            { key: "file", label: "File", type: "object" },
            { key: "content", label: "Content", type: "string" },
        ],
        meta: { multiple: false },
    },
    {
        type: "processing",
        category: "processing",
        name: "Data Transformer",
        description: "Transforms data from one format to another",
        icon: "FileJson",
        inputs: [
            { key: "data", label: "Input Data", type: "object", placeholder: "{}", value: {} },
            {
                key: "transformation",
                label: "Transformation",
                type: "string",
                placeholder: "data.map(item => item.value)",
                value: "data.map(item => item.value)",
            },
        ],
        outputs: [{ key: "result", label: "Transformed Data", type: "object" }],
        meta: { sandbox: true },
    },
    {
        type: "output",
        category: "output",
        name: "Chart Output",
        description: "Displays data as a chart",
        icon: "BarChart",
        inputs: [
            { key: "data", label: "Chart Data", type: "object", placeholder: "[]", value: [] },
            { key: "type", label: "Chart Type", type: "select", options: ["Bar", "Line", "Pie", "Scatter"], value: "Bar" },
            { key: "title", label: "Chart Title", type: "string", placeholder: "Chart Title", value: "Chart Title" },
        ],
        outputs: [],
        meta: { interactive: true },
    },
    {
        type: "condition",
        category: "condition",
        name: "Switch Case",
        description: "Routes based on multiple conditions",
        icon: "SwitchCamera",
        inputs: [
            { key: "value", label: "Input Value", type: "string", placeholder: "Value to evaluate", value: "" },
            {
                key: "cases",
                label: "Cases",
                type: "object",
                placeholder: "{case1: 'value1', case2: 'value2'}",
                value: { case1: "value1", case2: "value2" },
            },
        ],
        outputs: [
            { key: "case1", label: "Case 1", type: "boolean" },
            { key: "case2", label: "Case 2", type: "boolean" },
            { key: "default", label: "Default", type: "boolean" },
        ],
        meta: { dynamic: true },
    },
    {
        type: "input",
        category: "input",
        name: "Webhook Trigger",
        description: "Triggers flow on webhook call",
        icon: "Webhook",
        inputs: [
            { key: "endpoint", label: "Endpoint", type: "string", placeholder: "/api/webhook", value: "/api/webhook" },
            { key: "method", label: "Method", type: "select", options: ["GET", "POST"], value: "POST" },
        ],
        outputs: [
            { key: "payload", label: "Payload", type: "object" },
            { key: "headers", label: "Headers", type: "object" },
        ],
        meta: { authentication: false },
    },
    // Crypto Trading Bot Node
    {
        type: "crypto_wallet",
        category: "processing",
        name: "Crypto Wallet",
        description: "Connect to a cryptocurrency wallet",
        icon: "Wallet",
        inputs: [
            {
                key: "connectionType",
                label: "Connection Type",
                type: "select",
                options: ["Private Key", "Wallet Address", "MetaMask"],
                value: "Wallet Address",
            },
            {
                key: "privateKey",
                label: "Private Key",
                type: "string",
                placeholder: "Enter your private key (only if using Private Key connection)",
                value: "",
            },
            {
                key: "walletAddress",
                label: "Wallet Address",
                type: "string",
                placeholder: "0x...",
                value: "",
            },
            {
                key: "network",
                label: "Network",
                type: "select",
                options: ["Ethereum", "Binance Smart Chain", "Polygon", "Solana"],
                value: "Ethereum",
            },
        ],
        outputs: [
            { key: "walletInfo", label: "Wallet Info", type: "object" },
            { key: "balance", label: "Balance", type: "number" },
            { key: "connected", label: "Connected", type: "boolean" },
        ],
        meta: { secure: true },
    },
    {
        type: "crypto_trade",
        category: "processing",
        name: "Crypto Trade",
        description: "Execute cryptocurrency trades",
        icon: "TrendingUp",
        inputs: [
            {
                key: "walletInfo",
                label: "Wallet Info",
                type: "object",
                placeholder: "Connect to Crypto Wallet node first",
                value: null,
            },
            {
                key: "action",
                label: "Action",
                type: "select",
                options: ["Buy", "Sell", "Swap"],
                value: "Buy",
            },
            {
                key: "token",
                label: "Token",
                type: "string",
                placeholder: "ETH, BTC, SOL, etc.",
                value: "ETH",
            },
            {
                key: "amount",
                label: "Amount",
                type: "number",
                placeholder: "1.0",
                value: 0.1,
            },
            {
                key: "targetToken",
                label: "Target Token (for Swap)",
                type: "string",
                placeholder: "USDT, USDC, etc.",
                value: "USDT",
            },
            {
                key: "priceLimit",
                label: "Price Limit",
                type: "number",
                placeholder: "0 for market price",
                value: 0,
            },
        ],
        outputs: [
            { key: "transactionId", label: "Transaction ID", type: "string" },
            { key: "status", label: "Status", type: "string" },
            { key: "details", label: "Transaction Details", type: "object" },
        ],
        meta: { secure: true },
    },
    {
        type: "trading_bot",
        category: "processing",
        name: "Trading Bot",
        description: "AI-powered trading bot for crypto",
        icon: "BrainCircuit",
        inputs: [
            {
                key: "walletInfo",
                label: "Wallet Info",
                type: "object",
                placeholder: "Connect to Crypto Wallet node first",
                value: null,
            },
            {
                key: "strategy",
                label: "Trading Strategy",
                type: "select",
                options: ["Conservative", "Balanced", "Aggressive", "Custom"],
                value: "Balanced",
            },
            {
                key: "tokens",
                label: "Tokens to Trade",
                type: "object",
                placeholder: '["ETH", "BTC", "SOL"]',
                value: ["ETH", "BTC"],
            },
            {
                key: "budget",
                label: "Trading Budget",
                type: "number",
                placeholder: "Maximum amount to trade",
                value: 1000,
            },
            {
                key: "timeframe",
                label: "Analysis Timeframe",
                type: "select",
                options: ["1h", "4h", "1d", "1w"],
                value: "4h",
            },
            {
                key: "customRules",
                label: "Custom Trading Rules",
                type: "string",
                placeholder: "Enter custom trading logic",
                value: "",
            },
        ],
        outputs: [
            { key: "recommendation", label: "Trading Recommendation", type: "object" },
            { key: "analysis", label: "Market Analysis", type: "object" },
            { key: "performance", label: "Bot Performance", type: "object" },
        ],
        meta: { aiPowered: true, secure: true },
    },
    {
        type: "output",
        category: "output",
        name: "Portfolio Dashboard",
        description: "Visualize crypto portfolio and performance",
        icon: "LineChart",
        inputs: [
            {
                key: "walletInfo",
                label: "Wallet Info",
                type: "object",
                placeholder: "Connect to Crypto Wallet node first",
                value: null,
            },
            {
                key: "timeRange",
                label: "Time Range",
                type: "select",
                options: ["24h", "7d", "30d", "1y", "All"],
                value: "7d",
            },
            {
                key: "showTokens",
                label: "Show Tokens",
                type: "boolean",
                value: true,
            },
            {
                key: "showTransactions",
                label: "Show Transactions",
                type: "boolean",
                value: true,
            },
        ],
        outputs: [],
        meta: { interactive: true },
    },
]

